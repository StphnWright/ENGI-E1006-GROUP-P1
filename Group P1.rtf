{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww16240\viewh16220\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ENGI E1006 - Intro to Computing for Engineers & Applied Scientists\cb1 \uc0\u8232 
\f1\b0 \cb3 \

\f0\b Group Exercise Set 1
\f1\b0 \

\f0\b Due: Wed February 3 11:59pm, New York time (ET / GMT-5)\cb1 \uc0\u8232 
\f1\b0 \cb3 \
Please ask the instructor and CAs/TAs for help if you get stuck.\'a0\
Some material needed for this exercise set will not be discussed until the week of January 25.\
Use input() to read user input and print() to print results. Remember to convert the user input to integers where necessary. Do not use Python modules other than those explicitly mentioned.\'a0\
Unlike the take-home projects, the group exercises are
\f0\b \'a0intended to be worked on your assigned groups on repl.it.
\f1\b0 \'a0You can work with your group during Thursday class and you are welcome to continue in your own time. If you do not complete these problems during class, you must complete them at another time (either with your group or individually).\

\f0\b Groups should upload a single version of their solutions.\cb1 \uc0\u8232 
\f1\b0 \cb3 \
Comments in Python start with with a "# ..."\'a0\
Upload the following four\'a0files to Courseworks:\
problem1.py\cb1 \uc0\u8232 \cb3 problem2.py\cb1 \uc0\u8232 \cb3 problem3.py\cb1 \uc0\u8232 \cb3 problem4.py\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \cb1 \uc0\u8232 
\f0\b \cb3 Important:\'a0
\f1\b0 If you re-submit your assignment you need to re-upload\'a0
\f0\b all
\f1\b0 \'a0files, even if you changed just one of them. Otherwise, any files you uploaded previously will be lost if you submit a second time.\'a0\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf2 Problem 1 (25 pts) - Paint Calculator
\f1\b0 \
Write a program that estimates how much paint is needed to paint a rectangular room. Assume that the room has no windows and no doors, and that the floor does not have to be painted. Your program should read in the height, width, and length dimensions of the room in centimeters (cm). It should then print out the amount of paint needed in liters. Assume that 2.5 liters are needed to paint a surface area of 10 m
\fs24 2
\fs32 .\
Save your program in a file problem1.py.\

\f0\b Problem 2 (25 pts) - 24-hour Clock\cb1 \uc0\u8232 
\f1\b0 \cb3 A day has 86,400 secs (24 * 60 * 60). Given a number in the range 1 to 86,400 (inclusive), output the corresponding time as hours, minutes and seconds in\'a0a 24-hour clock format.\'a0\cb1 \uc0\u8232 \cb3 For example 70,000 seconds is "19 hours, 26 minutes, and 40 seconds". Your program should ask the user to type in a number of seconds and then print the time. Make sure you correctly format the case where one or more of the values is 1, for example "1 hour, 1 minute, and 1 second".\
Save your program in a file problem2.py.\

\f0\b Problem 3 (25 pts) - Perfect Numbers
\f1\b0 \
A number is perfect if it is equal to the sum of its factors (except itself, but including 1). For example, 28 (with factors 1,2,4,7,14) is perfect because 28 = 1+2+4+7+14. Write a Python program to determine if a number is perfect. Try to make your program as efficient as possible by reducing the number of tests required.\cb1 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \cb3 Save your program in a file problem3.py.\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf2 Problem 4 (25 pts) - k-smallest numbers\cb1 \uc0\u8232 
\f1\b0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \cb3 Write a Python program to produce a list of the\'a0k-smallest numbers in a list of numbers. For example, if\cb1 \
\cb3 li = [1,2,5,4,3,2]\cb1 \uc0\u8232 \cb3 k=3\cb1 \
\cb3 The output should be a list\cb1 \
\cb3 [1,2,2]\cb1 \uc0\u8232 \
\cb3 Discuss the algorithm for doing this first (possibly using pen and paper) before starting to program.\'a0Do NOT sort the list for this problem (e.g. do not use the list.sort() method).\'a0\cb1 \
\cb3 Your program may contain specific values for li and k hard-coded in the code, but should still work if these values are changed in the file. Save your program in a file problem4.py.\cb1 \
}